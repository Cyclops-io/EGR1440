#include <driverlib.h>
#include <stdio.h>
#include "LcdDriver\Crystalfontz128x128_ST7735.h"
#include "HAL_MSP_EXP432P401R_Crystalfontz128x128_ST7735.h"
void PORT1_IRQHandler(void);
volatile int8_t FallingEdges = 5;

int main(void){
	volatile uint32_t ii;

	MAP_WDT_A_holdTimer();

	/* initialize Clock System */
	MAP_CS_setDCOCenteredFrequency(CS_DCO_Frequency_48);
	MAP_CS_initClockSignal(CS_MCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1 );
	MAP_CS_initClockSignal(CS_HSMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1 );
	MAP_CS_initClockSignal(CS_SMCLK, CS_DCOCLK_SELECT, CS_CLOCK_DIVIDER_1 );
	MAP_CS_initClockSignal(CS_ACLK, CS_REFOCLK_SELECT, CS_CLOCK_DIVIDER_1 );

	/* Initialize display */
	Crystalfontz128x128_Init();
	/* Set default screen orientation */
	Crystalfontz128x128_SetOrientation(LCD_ORIENTATION_UP);
	/* Initializes graphics contex */
	Graphics_Context g_sContext;
	Graphics_initContext(&g_sContext, &g_sCrystalfontz128x128);
	Graphics_setForegroundColor(&g_sContext, GRAPHICS_COLOR_RED);
	Graphics_setBackgroundColor(&g_sContext, GRAPHICS_COLOR_WHITE);
	GrContextFontSet(&g_sContext, &g_sFontFixed6x8);
	Graphics_clearDisplay(&g_sContext);

	// setup P1.0 as output (red LED)
	MAP_GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN0);
	MAP_GPIO_setAsOutputPin(GPIO_PORT_P2, GPIO_PIN0);
	GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0);
	GPIO_setOutputLowOnPin(GPIO_PORT_P2, GPIO_PIN0);

	//setup SW1 as input with interrupt
	GPIO_setAsInputPinWithPullUpResistor(GPIO_PORT_P1, GPIO_PIN1);
	GPIO_interruptEdgeSelect(GPIO_PORT_P1, GPIO_PIN1, GPIO_HIGH_TO_LOW_TRANSITION);
	GPIO_clearInterruptFlag(GPIO_PORT_P1,GPIO_PIN1);
	GPIO_enableInterrupt(GPIO_PORT_P1,GPIO_PIN1);
	MAP_Interrupt_registerInterrupt(GPIO_PORT_P1,PORT1_IRQHandler);
	MAP_Interrupt_setPriority(INT_PORT1, 0x2);
	MAP_Interrupt_enableInterrupt(INT_PORT1);

	Interrupt_enableMaster ();

	char string[5];
	while (1){




		for(ii=0;ii<5000;ii++);
		sprintf(string, "%d", FallingEdges);
		Graphics_drawStringCentered(&g_sContext,
				(int8_t *)string,
										AUTO_STRING_LENGTH,
										64,
										30,
								OPAQUE_TEXT);
		Graphics_drawCircle(&g_sContext,20,20,10);
	}
}

void PORT1_IRQHandler(void){
	GPIO_clearInterruptFlag(GPIO_PORT_P1,GPIO_PIN1);
	GPIO_disableInterrupt(GPIO_PORT_P1,GPIO_PIN1);
	FallingEdges = FallingEdges + 1;
	GPIO_clearInterruptFlag(GPIO_PORT_P1,GPIO_PIN1);
	MAP_GPIO_toggleOutputOnPin(GPIO_PORT_P1, GPIO_PIN0);
	MAP_GPIO_toggleOutputOnPin(GPIO_PORT_P2, GPIO_PIN0);
	/* Delay for switch debounce */
	volatile uint32_t i;
	for(i = 0; i < 10000; i++);
	GPIO_enableInterrupt(GPIO_PORT_P1,GPIO_PIN1);
}
